!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
BIN_DIR	makefile	/^BIN_DIR=.\/$/;"	m
CC	makefile	/^CC=gcc$/;"	m
CFLAGS	makefile	/^CFLAGS= -lstdc++ \\$/;"	m
DATABASE	database.h	2;"	d
Database	database.h	/^class Database {$/;"	c
Database	program01.cpp	/^Database<T>::Database() { }$/;"	f	class:Database
EXE	makefile	/^EXE=run.out$/;"	m
INCLUDE_DIR	makefile	/^INCLUDE_DIR=.\/$/;"	m
OBJECTS	makefile	/^OBJECTS := $(SOURCES:$(SRC_DIR)\/%.$(SRC_EXT)=$(OBJ_DIR)\/%.o)$/;"	m
OBJ_DIR	makefile	/^OBJ_DIR=obj$/;"	m
PERSONAL	personal.h	2;"	d
Personal	personal.cpp	/^Personal::Personal(): nameLen(10), cityLen(10) {$/;"	f	class:Personal
Personal	personal.cpp	/^Personal::Personal(char* ssn, char* n, char* c, int y, long s): nameLen(10), cityLen(10) { $/;"	f	class:Personal
Personal	personal.h	/^class Personal {$/;"	c
SOURCES	makefile	/^SOURCES := $(wildcard $(SRC_DIR)\/*.$(SRC_EXT))$/;"	m
SRC_DIR	makefile	/^SRC_DIR=.\/$/;"	m
SRC_EXT	makefile	/^SRC_EXT=cpp$/;"	m
SSN	personal.h	/^    char SSN[10], *name, *city;$/;"	m	class:Personal
STUDENT	student.h	2;"	d
Student	student.cpp	/^Student::Student() : majorLen(10) {$/;"	f	class:Student
Student	student.cpp	/^Student::Student(char* ssn, char* n, char* c, int y, long s, char* m)$/;"	f	class:Student
Student	student.h	/^class Student: public Personal {$/;"	c
WFLAGS	makefile	/^WFLAGS= -Wall \\$/;"	m
add	program01.cpp	/^void Database<T>::add(T& d) {$/;"	f	class:Database
city	personal.h	/^    char SSN[10], *name, *city;$/;"	m	class:Personal
cityLen	personal.h	/^    const int nameLen, cityLen;$/;"	m	class:Personal
database	database.h	/^    std::fstream database;$/;"	m	class:Database
fName	database.h	/^    char fName[20];$/;"	m	class:Database
find	program01.cpp	/^bool Database<T>::find(const T& d) {$/;"	f	class:Database
main	program01.cpp	/^int main() {$/;"	f
major	student.h	/^    char* major;$/;"	m	class:Student
majorLen	student.h	/^    const int majorLen;$/;"	m	class:Student
modify	program01.cpp	/^void Database<T>::modify(const T& d) {$/;"	f	class:Database
name	personal.h	/^    char SSN[10], *name, *city;$/;"	m	class:Personal
nameLen	personal.h	/^    const int nameLen, cityLen;$/;"	m	class:Personal
operator <<	database.h	/^    friend std::ostream& operator<<(std::ostream& out, Database& db) {$/;"	f	class:Database::std
operator <<	personal.h	/^    friend std::ostream& operator<<(std::ostream& out, Personal& pr) {$/;"	f	class:Personal::std
operator <<	student.h	/^    friend std::ostream& operator<<(std::ostream& out, Student& sr) {$/;"	f	class:Student::std
operator ==	personal.h	/^    bool operator==(const Personal& pr) const {$/;"	f	class:Personal
operator >>	personal.h	/^    friend std::istream& operator>>(std::istream& in, Personal& pr) {$/;"	f	class:Personal::std
operator >>	student.h	/^    friend std::istream& operator>>(std::istream& in, Student& sr) {$/;"	f	class:Student::std
print	program01.cpp	/^std::ostream& Database<T>::print(std::ostream& out) {$/;"	f	class:std::Database
readFromConsole	personal.cpp	/^std::istream& Personal::readFromConsole(std::istream& in) {$/;"	f	class:std::Personal
readFromConsole	student.cpp	/^std::istream& Student::readFromConsole(std::istream& in) {$/;"	f	class:std::Student
readFromFile	personal.cpp	/^void Personal::readFromFile(std::fstream& in) {$/;"	f	class:Personal
readFromFile	student.cpp	/^void Student::readFromFile(std::fstream& in) {$/;"	f	class:Student
readKey	personal.cpp	/^void Personal::readKey() {$/;"	f	class:Personal
run	program01.cpp	/^void Database<T>::run() {$/;"	f	class:Database
salary	personal.h	/^    long salary;$/;"	m	class:Personal
size	personal.h	/^    int size() const {$/;"	f	class:Personal
size	student.h	/^    int size() const{$/;"	f	class:Student
writeLegibly	personal.cpp	/^std::ostream& Personal::writeLegibly(std::ostream& out) {$/;"	f	class:std::Personal
writeLegibly	student.cpp	/^std::ostream& Student::writeLegibly(std::ostream& out) {$/;"	f	class:std::Student
writetoFile	personal.cpp	/^void Personal::writetoFile(std::fstream& out) const {$/;"	f	class:Personal
writetoFile	student.cpp	/^void Student::writetoFile(std::fstream& out) const {$/;"	f	class:Student
year	personal.h	/^    int year;$/;"	m	class:Personal
